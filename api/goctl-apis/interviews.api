syntax = "v1"

type reqInterviewId {
    ID string `path:"_id"`
    UserID string `json:"user_id"`
}
type Author {
    ID string `json:"_id"`
    Name string `json:"name"`
}
type interview {
    ID string `json:"_id,omitempty"`
    Author Author `json:"author"`
    ClickNum int64 `json:"click_num,default=0"`
    Good int64 `json:"good,default=0"`
    HardStatus string `json:"hard_status"`
    HotNum int64 `json:"hot_num,default=0"`
    Summary string `json:"summary"`
    Tags []string `json:"tags"`
    Title string `json:"title"`
    UpdatedTime int64 `json:"updated_time,omitempty"`
    //    是否当前用户已提交评论，程序查询当前用户id是否在comments列表内
    Status bool `json:"status,default=false"`
    //Comments []string `json:"comments"`
}
type interview_detail {
    interview
    StarNum int64 `json:"star_num,default=0"`
    Bad int64 `json:"bad,default=0"`
    Content string `json:"content"`
    CreatedTime int64 `json:"created_time,omitempty"`
}

type reqInterviewAdd struct {
    Author      Author   `json:"author"`
    HardStatus  string   `json:"hard_status"`
    Summary     string   `json:"summary,omitempty"`
    Tags        []string `json:"tags"`
    Title       string   `json:"title"`
    Content     string `json:"content"`
}

type reqInterviews {
    Tags []string `json:"tags"`
    Search string `json:"search"`
}
// 共同类
type commInterviewsResp {
    Ok bool `json:"ok"`
    Error string `json:"error"`
}

@server(
    jwt: Auth
    group: interviews
    prefix: v1/api
)

service pg-backend {
    @handler AddInterview
    post /interviews (reqInterviewAdd) returns (interview_detail)

    @handler DeleteInterview
    delete /interviews/:_id (reqInterviewId) returns (commInterviewsResp)

    @handler UpdateInterview
    put /interviews/:_id (interview_detail) returns (interview_detail)

    @handler GetInterview
    get /interviews/:_id (reqInterviewId) returns (interview_detail)

    @handler GetAllInterview
    get /interviews (reqInterviews) returns ([]interview)
}